build_arch = "64"
executable_name = "raster"

object_add_compile_options(fPIC)
object_add_compile_options(g) # include debug symbols
object_add_compile_options("O0")
object_add_compile_options(Werror)
object_set_include_path("include/")

load_module("misc/scripts/raster_module.py")

object_add_compile_options("I/usr/include/freetype2")

if eq(get_platform(), windows) {
    shared_lib_prefix = "raster_"
    shared_lib_ext = ".dll"
} else {
    shared_lib_prefix = "libraster_"
    shared_lib_ext = ".so"
}

build_modules = [
    [ImGui, shared, [freetype]],
    [font, shared],
    [common, shared],
    [dispatchers_installer, shared, [raster_common]],
    [node_category, shared, [raster_common]],
    [dynamic_math, shared, [raster_common]],
    [traverser, shared, [raster_common]],
    [image, shared, [raster_common, OpenImageIO]],
    [gpu, shared, [glfw, raster_common, raster_ImGui, raster_image]],
    [compositor, shared, [raster_gpu, raster_common]]
    [attributes, shared, [raster_common, raster_ImGui]],
    [ui, shared, [raster_common, raster_ImGui, raster_gpu, raster_compositor, raster_node_category]],
    [app, shared, [raster_common, raster_ImGui, raster_gpu, raster_ui, raster_font, raster_traverser, raster_attributes, raster_compositor, raster_node_category, raster_dispatchers_installer]],
    [sampler_constants_base, shared, [raster_common]],
    [core, binary, [raster_common, raster_app]],
    
    ["resources/load_texture_by_path", node, [raster_common, raster_gpu, raster_node_category]],

    ["attributes/get_attribute_value", node, [raster_common, raster_node_category]],

    ["utilities/make/make_framebuffer", node, [raster_common, raster_gpu, raster_compositor, raster_node_category]],
    ["utilities/make/make_sampler_settings", node, [raster_common, raster_node_category]],
    ["utilities/make/make_transform2d", node, [raster_common]],
    ["utilities/get_time", node, [raster_common, raster_node_category]],
    ["utilities/transport_value", node, [raster_common, raster_node_category]],
    ["utilities/make/make_vec2", node, [raster_common, raster_node_category]],
    ["utilities/make/make_vec3", node, [raster_common, raster_node_category]],
    ["utilities/make/make_vec4", node, [raster_common, raster_node_category]],

    ["rendering/export_renderable", node, [raster_common, raster_gpu, raster_compositor, raster_node_category]],
    ["rendering/layer2d", node, [raster_common, raster_gpu, raster_compositor, raster_node_category]],
    ["rendering/echo", node, [raster_common, raster_gpu, raster_compositor, raster_node_category]],
    ["rendering/checkerboard", node, [raster_common, raster_gpu, raster_node_category]],

    ["sampler_constants/nearest_filtering", node, [raster_common, raster_sampler_constants_base, raster_node_category]],
    ["sampler_constants/linear_filtering", node, [raster_common, raster_sampler_constants_base, raster_node_category]],
    ["sampler_constants/repeat_wrapping", node, [raster_common, raster_sampler_constants_base, raster_node_category]],
    ["sampler_constants/mirrored_repeat_wrapping", node, [raster_common, raster_sampler_constants_base, raster_node_category]],
    ["sampler_constants/clamp_to_edge_wrapping", node, [raster_common, raster_sampler_constants_base, raster_node_category]],
    ["sampler_constants/clamp_to_border_wrapping", node, [raster_common, raster_sampler_constants_base, raster_node_category]],

    ["math/sine", node, [raster_common, raster_dynamic_math]],
    ["math/sine", node, [raster_common, raster_dynamic_math]],
    ["math/abs", node, [raster_common, raster_dynamic_math]],
    ["math/multiply", node, [raster_common, raster_dynamic_math]],
    ["math/add", node, [raster_common, raster_dynamic_math]],
    ["math/subtract", node, [raster_common, raster_dynamic_math]],
    ["math/divide", node, [raster_common, raster_dynamic_math]],

    ["sdf_shapes/sdf_circle", node, [raster_common, raster_node_category, raster_gpu]],
    ["sdf_shapes/sdf_rounded_rect", node, [raster_common, raster_node_category, raster_gpu]],
    ["sdf_shapes/sdf_rhombus", node, [raster_common, raster_node_category, raster_gpu]],
    ["sdf_shapes/sdf_heart", node, [raster_common, raster_node_category, raster_gpu]],
    ["sdf_shapes/sdf_mix", node, [raster_common, raster_node_category, raster_gpu]],
    ["sdf_shapes/sdf_annular", node, [raster_common, raster_node_category, raster_gpu]],

    ["other/debug_print", node, [raster_common, raster_node_category]]
]

scenario build_master {
    info("Building Raster (master)")

    write_build_number()

    if not(path_exists("nodes/")) {
        info("creating nodes/ because one doesn't exist")
        mkdir("nodes")
    }

    for_each($build_modules, target_build_module, execute_dispatch_module_safe)
}

# DISPATCHER LOGIC

scenario execute_dispatch_module_safe {
    try_scenario(execute_dispatch_module, execute_dispatch_error, dispatch_exception_msg)
}

scenario execute_dispatch_module {
    info(cat("Dispatching module: ", list_nth($target_build_module, 0)))
    call_scenario(dispatch_module_builder)
}

scenario dispatch_module_builder {
    target_module_name = list_nth($target_build_module, 0)
    target_module_type = list_nth($target_build_module, 1)

    is_node = false
    if eq($target_module_type, node) {
        is_node = true
        target_module_type = shared
    }

    targets_glob_path = cat("src/", $target_module_name)
    if eq($is_node, true) {
        targets_glob_path = cat("src/nodes/", $target_module_name)
    }
    targets = glob_files($targets_glob_path, "cpp")
    objects = object_compile($targets, $build_arch)
    deps = []

    if greater(list_len($target_build_module), 2) {
        deps = cat($deps, list_nth($target_build_module, 2))
    }

    target_executable_name = $target_module_name
    if eq($target_module_type, shared) {
        target_executable_name = cat($shared_lib_prefix, cat($target_module_name, $shared_lib_ext))
    }
    if eq($is_node, true) {
        target_executable_name = cat($shared_lib_prefix, cat(hash($target_module_name), $shared_lib_ext))
    }

    if eq($target_module_name, core) {
        target_executable_name = raster
    }
    link_executable($objects, $target_executable_name, $deps, $target_module_type, raster, ".", "./")

    if eq($is_node, true) {
        mv($target_executable_name, cat("nodes/", cat($shared_lib_prefix, cat(hash($target_module_name), $shared_lib_ext))))
    }
}

scenario execute_dispatch_error {
    fatal(cat(cat("Fatal error while trying to build Raster! (no dispatcher for ", list_nth($target_build_module, 0)), " module)"))
    fatal($dispatch_exception_msg)
    exit(1)
}

scenario clean {
    if path_exists("nodes/") { rmdir("nodes") }
    object_clean()
}

default_scenario = build_master
